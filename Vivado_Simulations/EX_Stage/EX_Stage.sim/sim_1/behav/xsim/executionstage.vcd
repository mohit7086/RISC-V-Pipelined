$date
   Tue Mar 18 00:31:32 2025
$end

$version
  2024.2.0
  $dumpfile ("executionstage.vcd") 
$end

$timescale
  1ps
$end

$scope module ExecutionStage_tb $end
$var reg 1 ! EX_MEM_RegWrite_i $end
$var reg 1 " MEM_WB_RegWrite_i $end
$var reg 5 # ID_EX_RS_i [4:0] $end
$var reg 5 $ ID_EX_RT_i [4:0] $end
$var reg 5 % EX_MEM_RD_i [4:0] $end
$var reg 5 & MEM_WB_RD_i [4:0] $end
$var reg 32 ' rs1_data [31:0] $end
$var reg 32 ( rs2_data [31:0] $end
$var reg 32 ) EX_MEM_i [31:0] $end
$var reg 32 * MEM_WB_i [31:0] $end
$var reg 2 + alu_op [1:0] $end
$var reg 1 , is_lui $end
$var reg 3 - funct3 [2:0] $end
$var reg 7 . funct7 [6:0] $end
$var reg 1 / alu_src $end
$var reg 32 0 immediate_data [31:0] $end
$var reg 32 1 PC_ID_EX [31:0] $end
$var reg 1 2 ALUSrcA $end
$var reg 1 3 is_jalr $end
$var wire 32 4 alu_out [31:0] $end
$var wire 1 5 branch_taken $end
$var wire 32 6 branch_addr [31:0] $end
$scope module uut $end
$var wire 1 7 EX_MEM_RegWrite_i $end
$var wire 1 8 MEM_WB_RegWrite_i $end
$var wire 5 9 ID_EX_RS_i [4:0] $end
$var wire 5 : ID_EX_RT_i [4:0] $end
$var wire 5 ; EX_MEM_RD_i [4:0] $end
$var wire 5 < MEM_WB_RD_i [4:0] $end
$var wire 32 = rs1_data [31:0] $end
$var wire 32 > rs2_data [31:0] $end
$var wire 32 ? EX_MEM_i [31:0] $end
$var wire 32 @ MEM_WB_i [31:0] $end
$var wire 2 A alu_op [1:0] $end
$var wire 1 B is_lui $end
$var wire 3 C funct3 [2:0] $end
$var wire 7 D funct7 [6:0] $end
$var wire 1 E alu_src $end
$var wire 32 F immediate_data [31:0] $end
$var wire 32 G PC_ID_EX [31:0] $end
$var wire 1 H ALUSrcA $end
$var wire 1 I is_jalr $end
$var wire 32 4 alu_out [31:0] $end
$var wire 1 5 branch_taken $end
$var wire 32 6 branch_addr [31:0] $end
$var wire 32 J forwarded_rs1 [31:0] $end
$var wire 32 K forwarded_rs2 [31:0] $end
$var wire 32 L operandA [31:0] $end
$var wire 32 M operandB [31:0] $end
$var wire 4 N alu_ctrl [3:0] $end
$var wire 32 O raw_alu_out [31:0] $end
$scope module FU_inst $end
$var wire 1 7 EX_MEM_RegWrite_i $end
$var wire 1 8 MEM_WB_RegWrite_i $end
$var wire 5 9 ID_EX_RS_i [4:0] $end
$var wire 5 : ID_EX_RT_i [4:0] $end
$var wire 5 ; EX_MEM_RD_i [4:0] $end
$var wire 5 < MEM_WB_RD_i [4:0] $end
$var wire 32 = rs1_data [31:0] $end
$var wire 32 > rs2_data [31:0] $end
$var wire 32 ? EX_MEM_i [31:0] $end
$var wire 32 @ MEM_WB_i [31:0] $end
$var reg 32 P ForwardedDataA_o [31:0] $end
$var reg 32 Q ForwardedDataB_o [31:0] $end
$var reg 2 R ForwardA [1:0] $end
$var reg 2 S ForwardB [1:0] $end
$upscope $end
$scope module alu_control_inst $end
$var wire 2 A alu_op [1:0] $end
$var wire 1 B is_lui $end
$var wire 3 C funct3 [2:0] $end
$var wire 7 D funct7 [6:0] $end
$var reg 4 T alu_ctrl [3:0] $end
$upscope $end
$scope module alu_inst $end
$var wire 32 L a [31:0] $end
$var wire 32 M b [31:0] $end
$var wire 4 N alu_ctrl [3:0] $end
$var reg 32 U alu_out [31:0] $end
$upscope $end
$scope module branch_unit_inst $end
$var wire 3 C funct3 [2:0] $end
$var wire 32 J a [31:0] $end
$var wire 32 K b [31:0] $end
$var reg 1 V branch_taken $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end

#0
$dumpvars
0!
0"
b0 #
b0 $
b0 %
b0 &
b0 '
b0 (
b0 )
b0 *
b0 +
0,
b0 -
b0 .
0/
b0 0
b0 1
02
03
b0 4
15
b0 6
07
08
b0 9
b0 :
b0 ;
b0 <
b0 =
b0 >
b0 ?
b0 @
b0 A
0B
b0 C
b0 D
0E
b0 F
b0 G
0H
0I
b0 J
b0 K
b0 L
b0 M
b0 N
b0 O
b0 P
b0 Q
b0 R
b0 S
b0 T
b0 U
1V
$end

#10000
b101 '
b1010 (
b10 +
b1111 4
05
b101 =
b1010 >
b10 A
b101 J
b1010 K
b101 L
b1010 M
b1111 O
b101 P
b1010 Q
b1111 U
0V

#20000
b1111 '
b100000 .
b101 4
b1111 =
b100000 D
b1111 J
b1111 L
b1 N
b101 O
b1111 P
b1 T
b101 U

#30000
b101 '
b0 +
1/
b1010 0
b1111 4
b1010 6
b101 =
b0 A
1E
b1010 F
b101 J
b101 L
b0 N
b1111 O
b101 P
b0 T
b1111 U

#40000
1,
b10010001101000101000000000000 0
b10010001101000101000000000000 4
b10010001101000101000000000000 6
1B
b10010001101000101000000000000 F
b0 L
b10010001101000101000000000000 M
b10010001101000101000000000000 O
b10010001101000101000000000000 U

#50000
b11 +
0,
b1000000000 0
b1000000000000 1
12
b1001000000000 4
b1001000000000 6
b11 A
0B
b1000000000 F
b1000000000000 G
1H
b1000000000000 L
b1000000000 M
b1001000000000 O
b1001000000000 U

#60000
b1000000000001 '
b100000 0
02
13
b1000000100000 4
b1000000100000 6
b1000000000001 =
b100000 F
0H
1I
b1000000000001 J
b1000000000001 L
b100000 M
b1000000100001 O
b1000000000001 P
b1000000100001 U

#70000
b101 '
b101 (
b1 +
03
b100101 4
15
b101 =
b101 >
b1 A
0I
b101 J
b101 K
b101 L
b100101 O
b101 P
b101 Q
b100101 U
1V

#80000
1!
b101 #
b101 %
b0 '
b1010 (
b1111011 )
b10 +
b0 .
0/
b10000101 4
05
17
b101 9
b101 ;
b0 =
b1010 >
b1111011 ?
b10 A
b0 D
0E
b1111011 J
b1010 K
b1111011 L
b1010 M
b10000101 O
b1111011 P
b1010 Q
b10 R
b10000101 U
0V

#90000
0!
1"
b101 &
b10100 (
b111001000 *
b111011100 4
07
18
b101 <
b10100 >
b111001000 @
b111001000 J
b10100 K
b111001000 L
b10100 M
b111011100 O
b111001000 P
b10100 Q
b1 R
b111011100 U

#100000
0"
b11111111111111111111111111111011 '
b11111111111111111111111111110110 (
b1 +
b101 -
b11111111111111111111111111110001 4
15
08
b11111111111111111111111111111011 =
b11111111111111111111111111110110 >
b1 A
b101 C
b11111111111111111111111111111011 J
b11111111111111111111111111110110 K
b11111111111111111111111111111011 L
b11111111111111111111111111110110 M
b11111111111111111111111111110001 O
b11111111111111111111111111111011 P
b11111111111111111111111111110110 Q
b0 R
b11111111111111111111111111110001 U
1V

#110000
b1010 '
b101 (
b110 -
b1111 4
05
b1010 =
b101 >
b110 C
b1010 J
b101 K
b1010 L
b101 M
b1111 O
b1010 P
b101 Q
b1111 U
0V
